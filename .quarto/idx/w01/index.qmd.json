{"title":"Week 1: Course Overview","markdown":{"yaml":{"title":"Week 1: Course Overview","subtitle":"{{< var course.slides-subtitle >}}","author":"{{< var course.author >}}","institute":"{{< var course.institute >}}","date":"2025-08-28","date-format":"full","lecnum":1,"categories":["Class Sessions"],"crossref":{"fig-title":"Fig"},"cache":true,"format":{"revealjs":{"output-file":"slides.html","html-math-method":"mathjax","slide-number":true,"scrollable":true,"link-external-icon":true,"link-external-newwindow":true,"footer":"{{< var weeks.1.footer >}}","include-in-header":{"text":"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><link rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css'><link rel='preconnect' href='https://fonts.gstatic.com' crossorigin><link href='https://fonts.googleapis.com/css2?family=Honk&display=swap' rel='stylesheet'>"},"theme":["default","../dsan-globals/jjquarto.scss"],"revealjs-plugins":["simplemenu"],"simplemenu":{"flat":true,"barhtml":{"header":"<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"},"scale":0.5}},"html":{"output-file":"index.html","html-math-method":"mathjax","df-print":"kable"}}},"headingText":"Agenda for today's session","containsRefs":false,"markdown":"\n\n::: {.content-visible unless-format=\"revealjs\"}\n\n<center class='mb-3'>\n<a class=\"h2\" href=\"./slides.html\" target=\"_blank\">Open slides in new tab &rarr;</a>\n</center>\n\n:::\n\n\n\n1. Course and syllabus overview\n\n1. Big Data Concepts\n    1. Definition\n    1. Challenges\n    1. Approaches\n\n1. Data Engineering\n\n1. Introduction to `bash`\n    1. Lab: Linux command line\n\n# Course Overview {data-stack-name=\"Course Overview\"}\n\n## Bookmark these links! {.smaller}\n\n* Course website: [{{< var course.url >}}]({{< var course.url >}})\n* GitHub Organization for your deliverables: [{{< var course.github_org >}}]({{< var course.github_org >}})\n* GitHub Classroom: [{{< var course.github_classroom >}}]({{< var course.github_classroom >}})\n* Slack Workspace: **DSAN6000 Fall 2025** - [{{< var course.slack >}}]({{< var course.slack >}})\n  * Join link: [{{< var course.slack_join >}}]({{< var course.slack_join >}})\n* Instructors email: [{{< var course.email >}}](mailto::{{< var course.email >}})\n* {{< var university.lms >}}: [{{< var course.lms_course_url >}}]({{< var course.lms_course_url >}})\n\n\n::: {.callout-tip appearance=\"simple\" icon=true }\nThese are also pinned on the Slack `main` channel\n:::\n\n## Instructional Team - Professors\n\n* Amit Arora, [`aa1603@georgetown.edu`](mailto:aa1603@georgetown.edu)\n* Jeff Jacobs, [`jj1088@georgetown.edu`](mailto:jj1088@georgetown.edu)\n\n## Amit Arora, [`aa1603@georgetown.edu`](mailto:aa1603@georgetown.edu) {.smaller .title-12}\n\n:::: {.columns} \n::: {.column width=\"75%\"}\n\n* Principal Solutions Architect - AI/ML at AWS\n* Adjunct Professor at Georgetown University\n* Multiple patents in telecommunications and applications of ML in telecommunications\n\nFun Facts\n\n:::\n\n::: {.column width=\"25%\"}\n![](./img/amit.jpeg 'Amit Arora')\n:::\n::::\n\n* I am a self-published author https://blueberriesinmysalad.com/\n* My book \"Blueberries in my salad: my forever journey towards fitness & strength\" is written as code in R and Markdown\n* I love to read books about health and human performance, productivity, philosophy and <i>Mathematics for ML</i>. My reading list is [online](https://aarora79.github.io/my-reading-list/)!\n\n## Jeff Jacobs, [`jj1088@georgetown.edu`](mailto:jj1088@georgetown.edu) {.smaller .title-12 .crunch-ul .crunch-img .crunch-title}\n\n:::: {.columns} \n::: {.column width=\"75%\"}\n\n* Full-time Professor at Georgetown (DSAN and Public Policy)\n* Background in Computational Social Science (Comp Sci MS &rarr; Political Economy PhD &rarr; Labor Econ Postdoc)\n\nFun Facts\n\n* Used Apache Airflow daily for PhD projects! [(Example)](https://ieeexplore.ieee.org/document/9346539)\n\n:::\n\n::: {.column width=\"25%\"}\n![](./img/jeff.jpg 'Jeff Jacobs')\n:::\n::::\n\n* Server admin for lab server &rarr; lab AWS account at Columbia (2015-2023) &rarr; new DSAN server (!) (2025-)\n* Passion project 1: [Code for Palestine (2015-2022)](https://www.codedotx.org/code-for-palestine) &rarr; [YouthCode-Gaza (2023)](https://www.codedotx.org/youthcode-gaza) &rarr; [Ukraine Ministry of Digital Transformation (2024)](https://jjacobs.me/data-ethics-cdto/#/title-slide)\n* Passion projects 2+3 [ðŸ¤“]: [Sample-based music production](https://open.spotify.com/track/43HqrCcK5FCkZG3mAQFmch?si=c6afba6dff394fe6), [web app frameworks](https://dbtskills.io/)\n* Sleep disorder means lots of [reading](https://app.thestorygraph.com/profile/jpowerj) -- mainly history! -- at night\n* Also teaching *PPOL6805 / DSAN 6750: GIS for Spatial Data Science* this semester\n\n## Instructional Team - Teaching Assistants {.smaller .title-12}\n\n* Binhui Chen, [`bc928@georgetown.edu`](mailto:bc928@georgetown.edu)\n* Pranav Sudhir Patil, [`pp755@georgetown.edu`](mailto:pp755@georgetown.edu)\n* Ofure Udabor, [`au195@georgetown.edu`](mailto:au195@georgetown.edu)\n* Yifei Wu, [`yw924@georgetown.edu`](mailto:yw924@georgetown.edu)\n* Naomi Yamaguchi, [`ny159@georgetown.edu`](mailto:ny159@georgetown.edu)\n* Leqi Ying, [`ly290@georgetown.edu`](mailto:ly290@georgetown.edu)\n* Xinyue (Monica) Zhang, [`xz646@georgetown.edu`](mailto:xz646@georgetown.edu)\n\n## Binhui Chen, [`bc928@georgetown.edu`](mailto:bc928@georgetown.edu) {.smaller .title-12}\n\n*(Lead TA for the course!)*\n\n<center>\n\n![](img/binhui.jpg)\n\n</center>\n\n## Pranav Sudhir Patil, [`pp755@georgetown.edu`](mailto:pp755@georgetown.edu) {.smaller .title-11}\n\n<center>\n\n![](img/pranav.jpg)\n\n</center>\n\n## Ofure Udabor, [`au195@georgetown.edu`](mailto:au195@georgetown.edu) {.smaller .title-12}\n\n<center>\n\n![](img/ofure2.jpg){width=\"35%\"}\n\n</center>\n\n## Yifei Wu, [`yw924@georgetown.edu`](mailto:yw924@georgetown.edu) {.smaller .title-12}\n\n<center>\n\n![](img/yifei.jpg)\n\n</center>\n\n## Naomi Yamaguchi, [`ny159@georgetown.edu`](mailto:ny159@georgetown.edu) {.smaller .title-11}\n\n<center>\n\n![](img/naomi.jpg)\n\n</center>\n\n## Leqi Ying, [`ly290@georgetown.edu`](mailto:ly290@georgetown.edu) {.smaller}\n\n<center>\n\n![](img/leqi.jpg)\n\n</center>\n\n## Xinyue (Monica) Zhang, [`xz646@georgetown.edu`](mailto:xz646@georgetown.edu) {.smaller .title-10}\n\n<center>\n\n![](img/xinyue.jpg)\n\n</center>\n\n## Course Description {.smaller}\n\n* Data is everywhere! Many times, it's just too big to work with traditional tools. This is a hands-on, practical workshop style course about using cloud computing resources to do analysis and manipulation of datasets that are too large to fit on a single machine and/or analyzed with traditional tools. The course will focus on Spark, MapReduce, the Hadoop Ecosystem and other tools.\n\n* You will understand how to acquire and/or ingest the data, and then massage, clean, transform, analyze, and model it within the context of big data analytics. You will be able to think more programmatically and logically about your big data needs, tools and issues.\n\nAlways refer to the [syllabus](/syllabus.html) and [calendar](/schedule.html) in the [course website]({{< var course.url >}}) for class policies.\n\n## Learning Objectives {.smaller}\n\n-   Setup, operate and manage big data tools and cloud infrastructure, including Spark, DuckDB, Polars, Athena, Snowflake, and orchestration tools like Airflow on Amazon Web Services\n-   Use ancillary tools that support big data processing, including git and the Linux command line\n-   Execute a big data analytics exercise from start to finish: ingest, wrangle, clean, analyze, store, and present\n-   Develop strategies to break down large problems and datasets into manageable pieces\n-   Identify broad spectrum resources and documentation to remain current with big data tools and developments\n-   Communicate and interpret the big data analytics results through written and verbal methods\n\n## Evaluation\n- Group project : 40%\n- Assignments : 30%\n- Lab completions : 20%\n- Quizzes : 10%\n\n## Course Materials\n* Slides/labs/assignment on Website/GitHub\n* Quizzes and readings in Canvas\n\n## Communication\n\n- **Slack is the primary form of communication** \n- [Instructional team email:](mailto:{{< var course.email >}})  `{{< var course.email >}}` \n\n\n## Slack rules {.smaller}\n\n- Post any question/comment about the course, assignments or any technical issue.\n- DMs are to be used sparingly\n- You may not DM multiple people in the instructional team at the same time for the same issue\n-  Keep an eye on the questions posted in Slack. Use the search function. It's very possible that we have already answered a questions\n- You may DM us back only if we DM you first on a given issue\n- Lab/assignment/project questions will only be answered up to 6 hours before something is due (i.e. 6pm on Mondays)\n\n## Midterm Project (NEW!) {.crunch-title .crunch-ul}\n\n* **Individual assignment** (not team-based)\n* **Timing**: Around Week 5-6\n* **Weight**: Equivalent to 2 homework assignments\n* **Format**: \n  * We provide the dataset and problem statement\n  * You apply big data tools and techniques learned in class\n  * End-to-end data pipeline implementation\n* **Details**: TBD (will be announced in Week 4)\n\n## Final Project {.smaller}\n\n* Groups of 3-4 students\n* Use an archive of Reddit data, augmented with external data\n* Exploratory analysis\n* NLP\n* Machine Learning\n* Writeup\n  * Data sourcing and ingesting\n  * Exploratory analysis\n  * Modeling\n  * Challenges and Learnings\n  * Conclusions \n  * Future work\n  \n\n# BIG DATA {data-stack-name=\"Big Data\"}\n\n**Where does it come from?**\n\n**How is it being created?**\n\n## In one minute of time (2018)\n\n<center>\n<img src=\"img/data-never-sleeps-2018.png\" width=\"50%\">\n</center>\n\n## In one minute of time (2019)\n\n<center>\n<img src=\"img/data-never-sleeps-2019.jpg\" width=\"50%\">\n</center>\n\n## In one minute of time (2020)\n\n<center>\n<img src=\"img/data-never-sleeps-2020.jpg\" width=\"50%\">\n</center>\n\n## In one minute of time (2021)\n\n<center>\n<img src=\"img/data-never-sleeps-2021.png\" width=\"50%\">\n</center>\n\n## In one minute of time (2025) {.crunch-title .text-80 .crunch-p .crunch-ul}\n\n**Every 60 seconds in 2025:**\n\n* ChatGPT serves **millions** of requests (exact numbers proprietary)\n* **500 hours** of video uploaded to YouTube\n* **1.04 million** Slack messages sent\n* **362,000 hours** watched on Netflix\n* **5.9-11.4 million** Google searches\n* **$443,000** spent on Amazon\n* AI-generated images created at **massive scale** (metrics not publicly available)\n* **347,200** posts on X (formerly Twitter)\n* **231-250 million** emails sent\n\n## _A lot_ of it is hapenning online. {.crunch-title .crunch-ul .text-80}\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n**We can record every:**\n\n* click\n* ad impression\n* billing event\n* video interaction\n* server request\n* transaction\n* network message\n* fault\n* ...\n\n:::\n::: {.column width=\"50%\"}\n\n<img src=\"img/iceberg.jpg\">\n\n:::\n::::\n\n## It can also be user-generated content: {.crunch-title .crunch-ul .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#user-generated-text}\n\n* Instagram posts & Reels\n* X (Twitter) posts & Threads\n* TikTok videos\n* YouTube Shorts\n* Reddit discussions\n* Discord conversations\n* AI-generated content (text, images, code)\n* ...\n\n:::\n::: {#user-generated-img}\n\n<img src=\"img/people.jpg\">\n\n:::\n::::\n\n## But health and scientific computing create a lot too!\n\n<center>\n<img src=\"img/scientific.png\">\n</center>\n\n## There's lots of **graph** data too {.crunch-title .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#graph-text}\n\nMany interesting datasets have a graph structure:\n\n* Social networks\n* Google's knowledge graph\n* Telecom networks\n* Computer networks\n* Road networks\n* Collaboration/relationships\n\nSome of these are **HUGE**\n\n:::\n::: {#graph-img}\n\n<img src=\"img/big-graph.jpg\">\n\n:::\n::::\n\n## Apache (web server) log files\n<img src=\"img/apache-server-log.jpg\" width=600>\n\n## System log files\n\n<img src=\"img/syslog-file.jpg\" width=600>\n\n## Internet of Things (IoT) in 2025 {.crunch-title .crunch-p .crunch-ul .crunch-img}\n\n**75 billion connected devices generating data:**\n\n:::: {layout=\"[50,50]\" layout-valign=\"top\"}\n::: {#iot-text}\n\n* Smart home devices (Alexa, Google Home, Apple HomePod)\n* Wearables (Apple Watch, Fitbit, Oura rings)\n* Connected vehicles & self-driving cars\n* Industrial IoT sensors\n\n:::\n::: {#iot-img}\n\n* Smart city infrastructure\n* Medical devices & remote patient monitoring\n\n<img src=\"img/sensors-everywhere.jpg\" width=600>\n\n:::\n::::\n\n## Smartphone Location Data\n\n<img src=\"img/smartphone.jpg\">\n\n## Where else?\n\n* The Internet\n\n* Transactions\n\n\n* Databases\n\n\n* Excel\n\n* PDF Files\n\n\n* Anything digital (music, movies, apps)\n\n\n* Some old floppy disk lying around the house\n\n\n## Typical Real-World Scenarios in 2025 {.text-90}\n\n**Scenario 1: Traditional Big Data**\n\nYou have a laptop with 16GB of RAM and a 256GB SSD. You are given a 1TB dataset in text files. **What do you do?**\n\n**Scenario 2: AI/ML Pipeline**\n\nYour company wants to build a RAG system using 10TB of internal documents. You need sub-second query response times. **How do you architect this?**\n\n**Scenario 3: Real-Time Analytics**\n\nYou need to process 1 million events/second from IoT devices and provide real-time dashboards with <1s latency. **What's your stack?** \n\n# What is Big Data?\n\n## Let's discuss!\n\n![Exponential data growth](img/data-exp-growth-statista.png)\n\n## Big Data Definitions\n\n**Wikipedia**\n\n_\"A collection of datasets so large and complex that it becomes difficult to process using traditional tools and applications. Big Data technologies describe a new generation of technologies and architectures designed to economically extract value from very large volumes of a wide variety of data, by enabling high-velocity capture, discover and/or analysis\"_\n\n\n**O'Reilly**\n\n_\"Big data is when **the size of the data itself** becomes **part of the problem**\"_\n\n\n## Frameworks for Thinking About Big Data {.crunch-title .title-08}\n\n**IBM (The 3 V's)**\n\n* **Volume** (Gigabytes &rarr; Exabytes &rarr; Zettabytes)\n* **Velocity** (Batch &rarr; Streaming &rarr; Real-time AI inference)\n* **Variety** (Structured, Unstructured, Embeddings)\n\n**Additional V's for 2025**\n\n:::: {.columns}\n::: {.column width=\"35%\"}\n\n* Variability\n* Veracity\n* Visualization\n\n:::\n::: {.column width=\"65%\"}\n\n* Value\n* **Vectors** (embeddings for AI/ML)\n* **Versatility** (multi-modal data)\n\n:::\n::::\n\n## Data \"Size\"\n\n$$\n\\text{``Size''} = f(\\text{Processing Ability}, \\text{Storage Space})\n$$\n\n* Can you analyze/process your data on a single machine?\n* Can you store (or is it stored) on a single machine?\n* Can you serve it fast enough for real-time AI applications?\n\nIf any of of the answers is _**no**_ then you have a big-ish data problem!\n\n# Big Data in the Age of Generative AI\n\n## The New Data Landscape (2025) {.crunch-ul}\n\n**Training Foundation Models**\n\n* GPT-4: Trained on about 13 trillion tokens\n* Llama 3: 15 trillion tokens \n* Google Gemini: Multi-modal training (text, images, video)\n* Each iteration requires **petabytes** of curated data\n\n**Data Requirements Have Exploded**\n\n* 2020: BERT trained on 3.3 billion words\n* 2023: GPT-4 trained on ~13 trillion tokens\n* 2024: Llama 3 trained on 15+ trillion tokens\n\n## Big Data Infrastructure: Data Lakes, Warehouses {.title-09 .text-80}\n\n**Traditional Use Cases:**\n\n* Business intelligence\n* Analytics & reporting\n* Historical data storage\n\n**Modern AI Use Cases:**\n\n* Training data repositories\n* Vector embeddings storage\n* RAG (Retrieval-Augmented Generation) context\n* Fine-tuning datasets\n* Evaluation & benchmark data\n\n## RAG and Context Engineering: The New Data Pipeline {.text-80 .crunch-title .crunch-p}\n\n```{dot}\n//| fig-height: 1\ndigraph G {\n  rankdir=\"LR\";\n  raw[label=\"Raw Data\"];\n  lake[label=\"Data Lake\"];\n  proc[label=\"Processing\"];\n  vec[label=\"Vector DB\"];\n  context[label=\"LLM Context\"];\n  raw -> lake -> proc -> vec -> context;\n}\n```\n\n**Key Components:**\n\n* **Data Lakes** (S3, Azure Data Lake): Store massive unstructured data\n* **Data Warehouses** (Snowflake, BigQuery): Structured data for context\n* **Vector Databases** (Pinecone, Weaviate, Qdrant): Semantic search\n* **Embedding Models**: Convert data to vectors\n* **Orchestration** (Airflow, Prefect): Manage the pipeline\n\n\n## MCP Servers & Agentic AI {.smaller .crunch-title .crunch-ul .crunch-p}\n\n**Model Context Protocol (MCP)**\n\n* Open protocol for connecting AI assistants to data sources\n* Standardized way to expose tools and data to LLMs\n* Enables \"agentic\" behavior - AI that can act autonomously\n\n**MCP in Production**\n\n```{dot}\n//| fig-height: 1\ndigraph G {\n  rankdir=\"LR\";\n  ware[label=\"Data Warehouse\"];\n  mcp[label=\"MCP Server\"];\n  agent[label=\"AI Agent\"];\n  action[label=\"Action\"];\n  ware -> mcp -> agent -> action;\n}\n```\n\n**Examples:**\n\n* AI agents querying Snowflake for real-time analytics\n* Autonomous systems updating data lakes based on predictions\n* Multi-agent systems coordinating through shared data contexts\n\n\n## Data Quality for AI {.text-85 .crunch-p .crunch-ul}\n\n*(Why Data Quality Matters More Than Ever)*\n\n**Garbage In, Garbage Out - Amplified:**\n\n* Bad training data â†’ Biased models\n* Incorrect RAG data â†’ Hallucinations\n* Poor data governance â†’ Compliance issues\n\n**Data Quality Challenges in 2025**\n\n* **Scale**: Validating trillions of tokens\n* **Diversity**: Multi-modal, multi-lingual data\n* **Velocity**: Real-time data for online learning\n* **Veracity**: Detecting AI-generated synthetic data\n\n## Real-World Big Data / AI Examples {.crunch-title .smaller .title-11 .crunch-ul .crunch-p}\n\n**Netflix**\n\n* **Data Scale**: 260+ million subscribers generating 100+ billion events/day\n* **AI Use**: Personalization, content recommendations, thumbnail generation\n* **Stack**: S3 â†’ Spark â†’ Iceberg â†’ ML models â†’ Real-time serving\n\n**Uber**\n\n* **Data Scale**: 35+ million trips per day, petabytes of location data\n* **AI Use**: ETA prediction, surge pricing, driver-rider matching\n* **Stack**: Kafka â†’ Spark Streaming â†’ Feature Store â†’ ML Platform\n\n**OpenAI**\n\n* **Data Scale**: Trillions of tokens for training, millions of queries/day\n* **AI Use**: GPT models, DALL-E, embeddings\n* **Stack**: Distributed training &rarr; Vector DBs &rarr; Inference clusters\n\n\n## Emerging Trends (2025-2027) {.smaller .crunch-ul .crunch-p}\n\n**Unified Platforms:**\n\n* Data lakes becoming \"AI lakes\"\n* Integrated vector + relational databases\n* One-stop shops for data + AI (Databricks, Snowflake Cortex)\n\n**Edge Computing + AI:**\n\n* Processing at the data source\n* Federated learning across devices\n* 5G enabling real-time edge AI\n\n**Synthetic Data:**\n\n* AI generating training data for AI\n* Privacy-preserving synthetic datasets\n\n## Relative Data Sizes {.text-90 .crunch-title}\n\n&nbsp;<br>\n\n```{=html}\n<style>\n.honk-honk {\n  font-size: 200% !important;\n  /* font-family: \"Bungee Spice\", sans-serif; */\n  font-family: \"Honk\", sans-serif;\n  /* font-optical-sizing: auto; */\n  font-weight: 400;\n  font-style: normal;\n}\n</style>\n```\n\n```{=html}\n<table>\n<thead>\n</thead>\n<tbody>\n<tr>\n  <td align=\"center\" rowspan=\"2\" width=\"15%\" style=\"vertical-align: middle; border-bottom: 0px;\">Can be <b>processed</b> on single machine?</td>\n  <td align=\"center\" width=\"5%\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-bottom: 0px solid #909090;\"><i>No</i></td>\n  <td align=\"center\" width=\"40%\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-top: 2px solid #909090; background-color: #FF991C90;\"><span data-qmd=\"**Medium**<br>(*Parallel Processing*)\"></span></td>\n  <td align=\"center\" width=\"40%\" style=\"background-color: #FF991C90; vertical-align: middle; border-top: 2px solid #909090; border-right: 2px solid #909090;\"><span data-qmd=\"[Big!]{.honk-honk}<br>Parallel + Distributed Processing\"></span></td>\n</tr>\n<tr>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-bottom: 0px solid #909090;\"><i>Yes</i></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090;\"><span data-qmd=\"Small<br>(*Your Laptop*)\"></span></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090; background-color: #FF991C90;\"><span data-qmd=\"**Medium**<br>(*Data Streaming*)\"></span></td>\n</tr>\n<tr>\n  <td style=\"border-bottom: 0px;\"></td>\n  <td style=\"border-bottom: 0px solid #909090;\"></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-bottom: 0px solid #909090;\"><i>Yes</i></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-bottom: 0px solid #909090;\"><i>No</i></td>\n</tr>\n<tr>\n  <td></td>\n  <td></td>\n  <td align=\"center\" colspan=\"2\">Can be <b>stored</b> on single machine?</td>\n</tr>\n</tbody>\n</table>\n```\n\n\n## What You'll Learn in This Course {.crunch-title .smaller}\n\n*Modern Big Data Stack (2025)*\n\n:::: {layout=\"[1,1]\"}\n::: {#bd-stack-left}\n\n**Query Engines:**\n\n* DuckDB - In-process analytical database\n* Polars - Lightning-fast DataFrame library  \n* Spark - Distributed processing at scale\n\n**Data Warehouses & Lakes:**\n\n* Snowflake - Cloud-native data warehouse\n* Athena - Serverless SQL on S3\n* Iceberg - Open table format\n\n:::\n::: {#bd-stack-right}\n\n**AI/ML Integration:**\n\n* Vector databases for embeddings\n* RAG implementation patterns\n* Streaming with Spark Structured Streaming\n\n**Orchestration:**\n\n* Airflow for pipeline management\n* Serverless with AWS Lambda\n\n:::\n::::\n\n## Data Types\n\n* Structured\n* Unstructured\n* Natural language\n* Machine-generated\n* Graph-based\n* Audio, video, and images\n* Streaming\n\n\n## Big Data vs. Small Data I {.smaller .crunch-title .text-60}\n\n|  | Small Data is usually... | On the other hand, Big Data... |\n|---|---|---|\n| **Goals** | gathered for a specific goal | may have a goal in mind when it's first started, but things can evolve or take unexpected directions |\n| **Location** | in one place, and often in a single computer file | can be in multiple files in multiple servers on computers in different geographic locations |\n| **Structure/Contents** | highly structured like an Excel spreadsheet, and it's got rows and columns of data | can be unstructured, it can have many formats in files involved across disciplines, and may link to other resources |\n| **Preparation** | prepared by the end user for their own purposes | is often prepared by one group of people, analyzed by a second group of people, and then used by a third group of people, and they may have different purposes, and they may have different disciplines |\n\n: {tbl-colwidths=\"[20, 40, 40]\"}\n\n## Big Data vs. Small Data II {.smaller .crunch-title .text-60}\n\n|  | Small Data is usually... | On the other hand, Big Data... |\n|---|---|---|\n| **Longevity** | kept for a specific amount of time after the project is over because there's a clear ending point. In the academic world it's maybe five or seven years and then you can throw it away | contains data that must be stored in perpetuity. Many big data projects extend into the past and future |\n| **Measurements** | measured with a single protocol using set units and it's usually done at the same time | is collected and measured using many sources, protocols, units, etc |\n| **Reproducibility** | be reproduced in their entirety if something goes wrong in the process | replication is seldom feasible |\n| **Stakes** | if things go wrong the costs are limited, it's not an enormous problem | can have high costs of failure in terms of money, time and labor |\n| **Access** | identified by a location specified in a row/column | unless it is exceptionally well designed, the organization can be inscrutable |\n| **Analysis** | analyzed together, all at once | is ordinarily analyzed in incremental steps |\n\n: {tbl-colwidths=\"[20, 40, 40]\"}\n\n## Challenges of Working with Large Datasets {.text-85 .title-09}\n\n| The V | The Challenge |\n|---|---|\n| **Volume** | data scale |\n| **Value** | data usefulness in decision making |\n| **Velocity** | data processing: batch or stream |\n| **Viscosity** | data complexity |\n| **Variability** | data flow inconsistency |\n| **Volatility** | data durability |\n| **Viability** | data activeness |\n| **Validity** | data properly understandable |\n| **Variety** | data heterogeneity |\n\n\n## Thinking About Big Data Workflows {.smaller .crunch-title .title-12}\n\n[William Cohen](http://www.cs.cmu.edu/~wcohen/) (Director, Research Engineering, Google):\n\n* Working with big data is _not_ about...\n  * Code optimization\n  * Learning the details of today's hardware/software (they are evolving...)\n* Working with big data _is_ about **understanding**:\n  * The cost of what you want to do\n  * What the tools that are available offer\n  * How much can be accomplished with linear or nearly-linear operations \n  * How to organize your computations so that they effectively use whateverâ€™s fast\n  * How to test/debug/verify with large data\n* Recall that traditional tools like `R` and `Python` are **single threaded** (by default)\n\n## Tools at-a-glance\n\n:::: {.columns}\n::: {.column width=\"50%\" .r-fit-text}\n### Languages, libraries, and projects\n- [Python](https://www.python.org/)\n    - [`pandas`](https://pandas.pydata.org/)\n    - [`polars`](https://www.pola.rs/)\n    - [`PySpark`](https://spark.apache.org/docs/latest/api/python/index.html)\n    - [`duckdb`](https://duckdb.org/docs/api/python/overview.html)\n    - [`dask`](https://www.dask.org/)\n    - [`ray`](https://www.ray.io/)\n- [Apache Arrow](https://arrow.apache.org/)\n- [Apache Spark](https://spark.apache.org/)\n- [SQL](https://en.wikipedia.org/wiki/SQL) \n- [Apache Hadoop](https://hadoop.apache.org/) (briefly)\n\n:::\n\n::: {.column width=\"50%\" .r-fit-text}\n\n### Cloud Services \n\n- Amazon Web Services (AWS)\n  - [AWS Sagemaker](https://aws.amazon.com/pm/sagemaker/)\n  - [Amazon S3](https://aws.amazon.com/s3/)\n- Azure\n  - [Azure Blob](https://azure.microsoft.com/en-us/products/storage/blobs/)\n  - [Azure Machine Learning](https://azure.microsoft.com/en-us/products/machine-learning/)\n\nOther:\n\n- [AWS Elastic MapReduce (EMR)](https://aws.amazon.com/emr/)\n  \n:::\n:::: \n\n## Additional links of interest\n\n- Matt Turck's Machine Learning, Artificial Intelligence & Data Landscape (MAD)\n    - [Article](https://mattturck.com/mad2023/)\n    - [Interactive Landscape](https://mad.firstmarkcap.com/)\n\n- [Is there life after Hadoop?](https://www.cio.com/article/188940/is-there-life-after-hadoop-the-answer-is-a-resounding-yes.html)\n\n- [10 Best Big Data Tools for 2023](https://jelvix.com/blog/top-5-big-data-frameworks) \n\n\n# Data Engineering {data-stack-name=\"Data Engineering\"}\n\n## Data Scientist vs. Data Engineer {.smaller}\n\nIn this course, you'll **augment** your data scientist skills with data engineering skills!\n\n<center>\n\n<img src=\"img/bdi-core-competencies-deng-and-dsci.png\" width=\"60%\">\n\n</center>\n\n## Data Engineer Responsibilities\n\n<center>\n\n<img src=\"img/datacamp-3.png\" width=600>\n\n</center>\n\n\n## Data Engineering: Levels 2 and 3\n\n<center>\n\n<img src=\"img/rogati.png\" width=600>\n\n</center>\n\n# Modern Data Architecture\n\n## Architecture\n\n![](img/01-data-platform-anatomy.png){fig-align=\"center\"}\n\n## Storage\n\n![](img/02-data-platform-storage.png){fig-align=\"center\"}\n\n## Source control\n\n![](img/03-data-platform-source-control.png){fig-align=\"center\"}\n\n## Orchestration\n\n![](img/04-data-platform-orchestration.png){fig-align=\"center\"}\n\n## Processing\n\n![](img/05-data-platform-processing.png){fig-align=\"center\"}\n\n## Analytics\n\n![](img/06-data-platform-analytics.png){fig-align=\"center\"}\n\n## Machine Learning\n\n![](img/07-data-platform-ml.png){fig-align=\"center\"}\n\n## Governance\n\n![](img/08-data-platform-governance.png){fig-align=\"center\"}\n\n# Time for Lab! Linux Command Line {data-stack-name=\"Linux Lab\"}\n\n## The Terminal {.crunch-title .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#terminal-text}\n\n- Terminal access was **THE ONLY** way to do programming\n- No GUIs! No Spyder, Jupyter, RStudio, etc.\n- Coding is still more powerful than graphical interfaces for complex jobs\n- Coding makes work repeatable\n\n:::\n::: {#terminal-img}\n\n![](img/terminal_old_computer.jpg)\n\n:::\n::::\n\n## BASH {.crunch-title}\n\n:::: {layout=\"[60,40]\" layout-valign=\"center\"}\n::: {#bash-text}\n\n* Created in 1989 by Brian Fox: \"**B**ourne-**A**gain **Sh**ell\"\n* Brian Fox also built the first online interactive banking software\n* BASH is a command processor\n* Connection between you and the machine language and hardware\n\n:::\n::: {#bash-img}\n\n![](img/bash.png)\n\n:::\n::::\n\n## The Prompt\n\n``` {.bash code-line-numbers=\"false\"}\nusername@hostname:current_directory $\n```\n\nWhat do we learn from the prompt?\n\n- Who you are - **`username`**\n- The machine where your code is running - **`hostname`**\n- The directory where your code is running - **`current_directory`**\n- The shell type - **`$`** - this symbol means BA$H\n\n## Syntax {.smaller .crunch-title .crunch-p .crunch-li-7}\n\n``` {.bash code-line-numbers=\"false\"}\nCOMMAND -F --FLAG\n```\n\n* `COMMAND` is the program, everything after that = arguments\n* `F` is a single letter flag, `FLAG` is a single word or words connected by dashes. A space breaks things into a new argument.\n* Sometimes argument has single letter and long form versions (e.g. `F` and `FLAG`)\n\n```{.bash code-line-numbers=\"false\"}\nCOMMAND -F --FILE file1\n```\n\n* Here we pass a text argument `\"file1\"` as the **value** for the `FILE` flag\n* **`-h`** flag is usually to get help. You can also run the **`man`** command and pass the name of the program as the argument to get the help page.\n\nLet's try basic commands:\n\n- **`date`** to get the current date\n- **`whoami`** to get your user name\n- **`echo \"Hello World\"`** to print to the console\n\n## Examining Files {.crunch-title .text-85 .crunch-ul .crunch-li-8}\n\n* Find out your **P**resent **W**orking **D**irectory **`pwd`**\n* Examine the contents of files and folders using **`ls`**\n* Make new files from scratch using **`touch`**\n* **Glob**: \"Mini-language\" for selecting files with wildcards\n  - **`\\*`** for wild card any number of characters\n  - **`\\?`** for wild card for a single character\n  - **`[]`** for one of many character options\n  - **`!`** for exclusion\n  - **`[:alpha:]`**, **`[:alnum:]`**, **`[:digit:]`**, **`[:lower:]`**, **`[:upper:]`**\n\n[Reference material: Shell Lesson 1,2,4,5](https://linuxjourney.com/lesson/the-shell)\n\n## Navigating Directories {.crunch-title .text-80 .crunch-ul .crunch-p .crunch-li-8}\n\n* Knowing **where your terminal is executing code** ensures you are working with the right inputs/outputs.\n* Use `pwd` to determine the Present Working Directory.\n* Change to a folder called \"git-repo\" with `cd git-repo`.\n- **`.`** refers to the current directory, such as **`./git-repo`**\n- **`..`** can be used to move up one level (**`cd ..`**), and can be combined to move up multiple levels (**`cd ../../my_folder`**)\n- **`/`** is the **root** of the filesystem: contains core folders (system, users)\n- **`~`** is the **home directory**. Move to folders referenced relative to this path by including it at the start of your path, for example **`~/projects`**.\n* To **visualize the structure** of your working directory, use **`tree`**\n\n[Reference link](https://www.freecodecamp.org/news/linux-command-line-bash-tutorial/)\n\n## Interacting with Files {.crunch-title .crunch-ul .text-85 .crunch-p .crunch-li-8}\n\nNow that we know how to navigate through **directories**, we need commands for interacting with **files**...\n\n- **`mv`** to move files from one location to another\n  * Can use glob here - `?`, `*`, `[]`, ...\n- **`cp`** to copy files instead of moving\n  + Can use glob here - `?`, `*`, `[]`, ...\n- **`mkdir`** to make a directory\n- **`rm`** to remove files\n- **`rmdir`** to remove directories\n- **`rm -rf`** to blast everything! WARNING!!! DO NOT USE UNLESS YOU KNOW WHAT YOU ARE DOING\n\n## Using BASH for Data Exploration {.crunch-title .crunch-ul .text-90 .crunch-li-8}\n\n- **`head FILENAME`** / **`tail FILENAME`** - glimpsing the first / last few rows of data\n- **`more FILENAME`** / **`less FILENAME`** - viewing the data with basic up / (up & down) controls\n- **`cat FILENAME`** - print entire file contents into terminal\n- **`vim FILENAME`** - open (or edit!) the file in vim editor\n- **`grep FILENAME`** - search for lines within a file that match a regex expression\n- **`wc FILENAME`** - count the number of lines (**`-l`** flag) or number of words (**`-w`** flag)\n\n[Reference material: Text Lesson 8,9,15,16](https://linuxjourney.com/lesson/stdout-standard-out-redirect)\n\n## Pipes and Arrows\n\n* **`|`** sends the stdout to another command (is the most powerful symbol in BASH!)\n* **`>`**  sends stdout to a file and overwrites anything that was there before\n* **`>>`** appends the stdout to the end of a file (or starts a new file from scratch if one does not exist yet)\n* **`<`** sends stdin into the command on the left\n\n[Reference material: Text Lesson 1,2,3,4,5](https://linuxjourney.com/lesson/stdout-standard-out-redirect)\n\n## Alias and User Files {.crunch-title .text-85}\n\n* `/.bashrc` is where your shell settings are located\n* How many processes? **`whoami | xargs ps -u | wc -l`**\n* Hard to remember full command! Let's make an **alias**\n* General syntax:\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias alias_name=\"command_to_run\"\n  ```\n\n* For our case:\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias nproc=\"whoami | xargs ps -u | wc -l\"\n  ```\n\n* Now we need to put this alias into the .bashrc\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias nproc=\"whoami | xargs ps -u | wc -l\" >> ~/.bashrc\n  ```\n\n* Your commands get saved in **`~/.bash_history`**\n\n## Process Management {.crunch-title .text-90 .crunch-ul .crunch-p .crunch-li-8}\n\n* Use **`ps`** to see your running processes\n* Use **`top`** or even better **`htop`** to see all running processes\n* Install **htop** via **`sudo yum install htop -y`**\n* To kill a broken process: first find the **process ID (PID)**\n* Then use **`kill [PID NUM]`** to \"ask\" the process to terminate. If things get really bad: **`kill -9 [PID NUM]`**\n* To kill a command in the terminal window it is running in, try using **Ctrl + C** or **Ctrl + /**\n* Run **`cat`** on its own to let it stay open. Now open a new terminal to examine the processes and find the cat process.\n\n[Reference material: Text Lesson 1,2,3,7,9,10](https://linuxjourney.com/lesson/monitor-processes-ps-command)\n\n## Try playing a Linux game!\n\n[Bash crawl](https://gitlab.com/slackermedia/bashcrawl) is a game to help you practice your navigation and file access skills. Click on the **binder** link in this repo to launch a jupyter lab session and explore!\n","srcMarkdownNoYaml":"\n\n::: {.content-visible unless-format=\"revealjs\"}\n\n<center class='mb-3'>\n<a class=\"h2\" href=\"./slides.html\" target=\"_blank\">Open slides in new tab &rarr;</a>\n</center>\n\n:::\n\n\n## Agenda for today's session\n\n1. Course and syllabus overview\n\n1. Big Data Concepts\n    1. Definition\n    1. Challenges\n    1. Approaches\n\n1. Data Engineering\n\n1. Introduction to `bash`\n    1. Lab: Linux command line\n\n# Course Overview {data-stack-name=\"Course Overview\"}\n\n## Bookmark these links! {.smaller}\n\n* Course website: [{{< var course.url >}}]({{< var course.url >}})\n* GitHub Organization for your deliverables: [{{< var course.github_org >}}]({{< var course.github_org >}})\n* GitHub Classroom: [{{< var course.github_classroom >}}]({{< var course.github_classroom >}})\n* Slack Workspace: **DSAN6000 Fall 2025** - [{{< var course.slack >}}]({{< var course.slack >}})\n  * Join link: [{{< var course.slack_join >}}]({{< var course.slack_join >}})\n* Instructors email: [{{< var course.email >}}](mailto::{{< var course.email >}})\n* {{< var university.lms >}}: [{{< var course.lms_course_url >}}]({{< var course.lms_course_url >}})\n\n\n::: {.callout-tip appearance=\"simple\" icon=true }\nThese are also pinned on the Slack `main` channel\n:::\n\n## Instructional Team - Professors\n\n* Amit Arora, [`aa1603@georgetown.edu`](mailto:aa1603@georgetown.edu)\n* Jeff Jacobs, [`jj1088@georgetown.edu`](mailto:jj1088@georgetown.edu)\n\n## Amit Arora, [`aa1603@georgetown.edu`](mailto:aa1603@georgetown.edu) {.smaller .title-12}\n\n:::: {.columns} \n::: {.column width=\"75%\"}\n\n* Principal Solutions Architect - AI/ML at AWS\n* Adjunct Professor at Georgetown University\n* Multiple patents in telecommunications and applications of ML in telecommunications\n\nFun Facts\n\n:::\n\n::: {.column width=\"25%\"}\n![](./img/amit.jpeg 'Amit Arora')\n:::\n::::\n\n* I am a self-published author https://blueberriesinmysalad.com/\n* My book \"Blueberries in my salad: my forever journey towards fitness & strength\" is written as code in R and Markdown\n* I love to read books about health and human performance, productivity, philosophy and <i>Mathematics for ML</i>. My reading list is [online](https://aarora79.github.io/my-reading-list/)!\n\n## Jeff Jacobs, [`jj1088@georgetown.edu`](mailto:jj1088@georgetown.edu) {.smaller .title-12 .crunch-ul .crunch-img .crunch-title}\n\n:::: {.columns} \n::: {.column width=\"75%\"}\n\n* Full-time Professor at Georgetown (DSAN and Public Policy)\n* Background in Computational Social Science (Comp Sci MS &rarr; Political Economy PhD &rarr; Labor Econ Postdoc)\n\nFun Facts\n\n* Used Apache Airflow daily for PhD projects! [(Example)](https://ieeexplore.ieee.org/document/9346539)\n\n:::\n\n::: {.column width=\"25%\"}\n![](./img/jeff.jpg 'Jeff Jacobs')\n:::\n::::\n\n* Server admin for lab server &rarr; lab AWS account at Columbia (2015-2023) &rarr; new DSAN server (!) (2025-)\n* Passion project 1: [Code for Palestine (2015-2022)](https://www.codedotx.org/code-for-palestine) &rarr; [YouthCode-Gaza (2023)](https://www.codedotx.org/youthcode-gaza) &rarr; [Ukraine Ministry of Digital Transformation (2024)](https://jjacobs.me/data-ethics-cdto/#/title-slide)\n* Passion projects 2+3 [ðŸ¤“]: [Sample-based music production](https://open.spotify.com/track/43HqrCcK5FCkZG3mAQFmch?si=c6afba6dff394fe6), [web app frameworks](https://dbtskills.io/)\n* Sleep disorder means lots of [reading](https://app.thestorygraph.com/profile/jpowerj) -- mainly history! -- at night\n* Also teaching *PPOL6805 / DSAN 6750: GIS for Spatial Data Science* this semester\n\n## Instructional Team - Teaching Assistants {.smaller .title-12}\n\n* Binhui Chen, [`bc928@georgetown.edu`](mailto:bc928@georgetown.edu)\n* Pranav Sudhir Patil, [`pp755@georgetown.edu`](mailto:pp755@georgetown.edu)\n* Ofure Udabor, [`au195@georgetown.edu`](mailto:au195@georgetown.edu)\n* Yifei Wu, [`yw924@georgetown.edu`](mailto:yw924@georgetown.edu)\n* Naomi Yamaguchi, [`ny159@georgetown.edu`](mailto:ny159@georgetown.edu)\n* Leqi Ying, [`ly290@georgetown.edu`](mailto:ly290@georgetown.edu)\n* Xinyue (Monica) Zhang, [`xz646@georgetown.edu`](mailto:xz646@georgetown.edu)\n\n## Binhui Chen, [`bc928@georgetown.edu`](mailto:bc928@georgetown.edu) {.smaller .title-12}\n\n*(Lead TA for the course!)*\n\n<center>\n\n![](img/binhui.jpg)\n\n</center>\n\n## Pranav Sudhir Patil, [`pp755@georgetown.edu`](mailto:pp755@georgetown.edu) {.smaller .title-11}\n\n<center>\n\n![](img/pranav.jpg)\n\n</center>\n\n## Ofure Udabor, [`au195@georgetown.edu`](mailto:au195@georgetown.edu) {.smaller .title-12}\n\n<center>\n\n![](img/ofure2.jpg){width=\"35%\"}\n\n</center>\n\n## Yifei Wu, [`yw924@georgetown.edu`](mailto:yw924@georgetown.edu) {.smaller .title-12}\n\n<center>\n\n![](img/yifei.jpg)\n\n</center>\n\n## Naomi Yamaguchi, [`ny159@georgetown.edu`](mailto:ny159@georgetown.edu) {.smaller .title-11}\n\n<center>\n\n![](img/naomi.jpg)\n\n</center>\n\n## Leqi Ying, [`ly290@georgetown.edu`](mailto:ly290@georgetown.edu) {.smaller}\n\n<center>\n\n![](img/leqi.jpg)\n\n</center>\n\n## Xinyue (Monica) Zhang, [`xz646@georgetown.edu`](mailto:xz646@georgetown.edu) {.smaller .title-10}\n\n<center>\n\n![](img/xinyue.jpg)\n\n</center>\n\n## Course Description {.smaller}\n\n* Data is everywhere! Many times, it's just too big to work with traditional tools. This is a hands-on, practical workshop style course about using cloud computing resources to do analysis and manipulation of datasets that are too large to fit on a single machine and/or analyzed with traditional tools. The course will focus on Spark, MapReduce, the Hadoop Ecosystem and other tools.\n\n* You will understand how to acquire and/or ingest the data, and then massage, clean, transform, analyze, and model it within the context of big data analytics. You will be able to think more programmatically and logically about your big data needs, tools and issues.\n\nAlways refer to the [syllabus](/syllabus.html) and [calendar](/schedule.html) in the [course website]({{< var course.url >}}) for class policies.\n\n## Learning Objectives {.smaller}\n\n-   Setup, operate and manage big data tools and cloud infrastructure, including Spark, DuckDB, Polars, Athena, Snowflake, and orchestration tools like Airflow on Amazon Web Services\n-   Use ancillary tools that support big data processing, including git and the Linux command line\n-   Execute a big data analytics exercise from start to finish: ingest, wrangle, clean, analyze, store, and present\n-   Develop strategies to break down large problems and datasets into manageable pieces\n-   Identify broad spectrum resources and documentation to remain current with big data tools and developments\n-   Communicate and interpret the big data analytics results through written and verbal methods\n\n## Evaluation\n- Group project : 40%\n- Assignments : 30%\n- Lab completions : 20%\n- Quizzes : 10%\n\n## Course Materials\n* Slides/labs/assignment on Website/GitHub\n* Quizzes and readings in Canvas\n\n## Communication\n\n- **Slack is the primary form of communication** \n- [Instructional team email:](mailto:{{< var course.email >}})  `{{< var course.email >}}` \n\n\n## Slack rules {.smaller}\n\n- Post any question/comment about the course, assignments or any technical issue.\n- DMs are to be used sparingly\n- You may not DM multiple people in the instructional team at the same time for the same issue\n-  Keep an eye on the questions posted in Slack. Use the search function. It's very possible that we have already answered a questions\n- You may DM us back only if we DM you first on a given issue\n- Lab/assignment/project questions will only be answered up to 6 hours before something is due (i.e. 6pm on Mondays)\n\n## Midterm Project (NEW!) {.crunch-title .crunch-ul}\n\n* **Individual assignment** (not team-based)\n* **Timing**: Around Week 5-6\n* **Weight**: Equivalent to 2 homework assignments\n* **Format**: \n  * We provide the dataset and problem statement\n  * You apply big data tools and techniques learned in class\n  * End-to-end data pipeline implementation\n* **Details**: TBD (will be announced in Week 4)\n\n## Final Project {.smaller}\n\n* Groups of 3-4 students\n* Use an archive of Reddit data, augmented with external data\n* Exploratory analysis\n* NLP\n* Machine Learning\n* Writeup\n  * Data sourcing and ingesting\n  * Exploratory analysis\n  * Modeling\n  * Challenges and Learnings\n  * Conclusions \n  * Future work\n  \n\n# BIG DATA {data-stack-name=\"Big Data\"}\n\n**Where does it come from?**\n\n**How is it being created?**\n\n## In one minute of time (2018)\n\n<center>\n<img src=\"img/data-never-sleeps-2018.png\" width=\"50%\">\n</center>\n\n## In one minute of time (2019)\n\n<center>\n<img src=\"img/data-never-sleeps-2019.jpg\" width=\"50%\">\n</center>\n\n## In one minute of time (2020)\n\n<center>\n<img src=\"img/data-never-sleeps-2020.jpg\" width=\"50%\">\n</center>\n\n## In one minute of time (2021)\n\n<center>\n<img src=\"img/data-never-sleeps-2021.png\" width=\"50%\">\n</center>\n\n## In one minute of time (2025) {.crunch-title .text-80 .crunch-p .crunch-ul}\n\n**Every 60 seconds in 2025:**\n\n* ChatGPT serves **millions** of requests (exact numbers proprietary)\n* **500 hours** of video uploaded to YouTube\n* **1.04 million** Slack messages sent\n* **362,000 hours** watched on Netflix\n* **5.9-11.4 million** Google searches\n* **$443,000** spent on Amazon\n* AI-generated images created at **massive scale** (metrics not publicly available)\n* **347,200** posts on X (formerly Twitter)\n* **231-250 million** emails sent\n\n## _A lot_ of it is hapenning online. {.crunch-title .crunch-ul .text-80}\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n**We can record every:**\n\n* click\n* ad impression\n* billing event\n* video interaction\n* server request\n* transaction\n* network message\n* fault\n* ...\n\n:::\n::: {.column width=\"50%\"}\n\n<img src=\"img/iceberg.jpg\">\n\n:::\n::::\n\n## It can also be user-generated content: {.crunch-title .crunch-ul .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#user-generated-text}\n\n* Instagram posts & Reels\n* X (Twitter) posts & Threads\n* TikTok videos\n* YouTube Shorts\n* Reddit discussions\n* Discord conversations\n* AI-generated content (text, images, code)\n* ...\n\n:::\n::: {#user-generated-img}\n\n<img src=\"img/people.jpg\">\n\n:::\n::::\n\n## But health and scientific computing create a lot too!\n\n<center>\n<img src=\"img/scientific.png\">\n</center>\n\n## There's lots of **graph** data too {.crunch-title .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#graph-text}\n\nMany interesting datasets have a graph structure:\n\n* Social networks\n* Google's knowledge graph\n* Telecom networks\n* Computer networks\n* Road networks\n* Collaboration/relationships\n\nSome of these are **HUGE**\n\n:::\n::: {#graph-img}\n\n<img src=\"img/big-graph.jpg\">\n\n:::\n::::\n\n## Apache (web server) log files\n<img src=\"img/apache-server-log.jpg\" width=600>\n\n## System log files\n\n<img src=\"img/syslog-file.jpg\" width=600>\n\n## Internet of Things (IoT) in 2025 {.crunch-title .crunch-p .crunch-ul .crunch-img}\n\n**75 billion connected devices generating data:**\n\n:::: {layout=\"[50,50]\" layout-valign=\"top\"}\n::: {#iot-text}\n\n* Smart home devices (Alexa, Google Home, Apple HomePod)\n* Wearables (Apple Watch, Fitbit, Oura rings)\n* Connected vehicles & self-driving cars\n* Industrial IoT sensors\n\n:::\n::: {#iot-img}\n\n* Smart city infrastructure\n* Medical devices & remote patient monitoring\n\n<img src=\"img/sensors-everywhere.jpg\" width=600>\n\n:::\n::::\n\n## Smartphone Location Data\n\n<img src=\"img/smartphone.jpg\">\n\n## Where else?\n\n* The Internet\n\n* Transactions\n\n\n* Databases\n\n\n* Excel\n\n* PDF Files\n\n\n* Anything digital (music, movies, apps)\n\n\n* Some old floppy disk lying around the house\n\n\n## Typical Real-World Scenarios in 2025 {.text-90}\n\n**Scenario 1: Traditional Big Data**\n\nYou have a laptop with 16GB of RAM and a 256GB SSD. You are given a 1TB dataset in text files. **What do you do?**\n\n**Scenario 2: AI/ML Pipeline**\n\nYour company wants to build a RAG system using 10TB of internal documents. You need sub-second query response times. **How do you architect this?**\n\n**Scenario 3: Real-Time Analytics**\n\nYou need to process 1 million events/second from IoT devices and provide real-time dashboards with <1s latency. **What's your stack?** \n\n# What is Big Data?\n\n## Let's discuss!\n\n![Exponential data growth](img/data-exp-growth-statista.png)\n\n## Big Data Definitions\n\n**Wikipedia**\n\n_\"A collection of datasets so large and complex that it becomes difficult to process using traditional tools and applications. Big Data technologies describe a new generation of technologies and architectures designed to economically extract value from very large volumes of a wide variety of data, by enabling high-velocity capture, discover and/or analysis\"_\n\n\n**O'Reilly**\n\n_\"Big data is when **the size of the data itself** becomes **part of the problem**\"_\n\n\n## Frameworks for Thinking About Big Data {.crunch-title .title-08}\n\n**IBM (The 3 V's)**\n\n* **Volume** (Gigabytes &rarr; Exabytes &rarr; Zettabytes)\n* **Velocity** (Batch &rarr; Streaming &rarr; Real-time AI inference)\n* **Variety** (Structured, Unstructured, Embeddings)\n\n**Additional V's for 2025**\n\n:::: {.columns}\n::: {.column width=\"35%\"}\n\n* Variability\n* Veracity\n* Visualization\n\n:::\n::: {.column width=\"65%\"}\n\n* Value\n* **Vectors** (embeddings for AI/ML)\n* **Versatility** (multi-modal data)\n\n:::\n::::\n\n## Data \"Size\"\n\n$$\n\\text{``Size''} = f(\\text{Processing Ability}, \\text{Storage Space})\n$$\n\n* Can you analyze/process your data on a single machine?\n* Can you store (or is it stored) on a single machine?\n* Can you serve it fast enough for real-time AI applications?\n\nIf any of of the answers is _**no**_ then you have a big-ish data problem!\n\n# Big Data in the Age of Generative AI\n\n## The New Data Landscape (2025) {.crunch-ul}\n\n**Training Foundation Models**\n\n* GPT-4: Trained on about 13 trillion tokens\n* Llama 3: 15 trillion tokens \n* Google Gemini: Multi-modal training (text, images, video)\n* Each iteration requires **petabytes** of curated data\n\n**Data Requirements Have Exploded**\n\n* 2020: BERT trained on 3.3 billion words\n* 2023: GPT-4 trained on ~13 trillion tokens\n* 2024: Llama 3 trained on 15+ trillion tokens\n\n## Big Data Infrastructure: Data Lakes, Warehouses {.title-09 .text-80}\n\n**Traditional Use Cases:**\n\n* Business intelligence\n* Analytics & reporting\n* Historical data storage\n\n**Modern AI Use Cases:**\n\n* Training data repositories\n* Vector embeddings storage\n* RAG (Retrieval-Augmented Generation) context\n* Fine-tuning datasets\n* Evaluation & benchmark data\n\n## RAG and Context Engineering: The New Data Pipeline {.text-80 .crunch-title .crunch-p}\n\n```{dot}\n//| fig-height: 1\ndigraph G {\n  rankdir=\"LR\";\n  raw[label=\"Raw Data\"];\n  lake[label=\"Data Lake\"];\n  proc[label=\"Processing\"];\n  vec[label=\"Vector DB\"];\n  context[label=\"LLM Context\"];\n  raw -> lake -> proc -> vec -> context;\n}\n```\n\n**Key Components:**\n\n* **Data Lakes** (S3, Azure Data Lake): Store massive unstructured data\n* **Data Warehouses** (Snowflake, BigQuery): Structured data for context\n* **Vector Databases** (Pinecone, Weaviate, Qdrant): Semantic search\n* **Embedding Models**: Convert data to vectors\n* **Orchestration** (Airflow, Prefect): Manage the pipeline\n\n\n## MCP Servers & Agentic AI {.smaller .crunch-title .crunch-ul .crunch-p}\n\n**Model Context Protocol (MCP)**\n\n* Open protocol for connecting AI assistants to data sources\n* Standardized way to expose tools and data to LLMs\n* Enables \"agentic\" behavior - AI that can act autonomously\n\n**MCP in Production**\n\n```{dot}\n//| fig-height: 1\ndigraph G {\n  rankdir=\"LR\";\n  ware[label=\"Data Warehouse\"];\n  mcp[label=\"MCP Server\"];\n  agent[label=\"AI Agent\"];\n  action[label=\"Action\"];\n  ware -> mcp -> agent -> action;\n}\n```\n\n**Examples:**\n\n* AI agents querying Snowflake for real-time analytics\n* Autonomous systems updating data lakes based on predictions\n* Multi-agent systems coordinating through shared data contexts\n\n\n## Data Quality for AI {.text-85 .crunch-p .crunch-ul}\n\n*(Why Data Quality Matters More Than Ever)*\n\n**Garbage In, Garbage Out - Amplified:**\n\n* Bad training data â†’ Biased models\n* Incorrect RAG data â†’ Hallucinations\n* Poor data governance â†’ Compliance issues\n\n**Data Quality Challenges in 2025**\n\n* **Scale**: Validating trillions of tokens\n* **Diversity**: Multi-modal, multi-lingual data\n* **Velocity**: Real-time data for online learning\n* **Veracity**: Detecting AI-generated synthetic data\n\n## Real-World Big Data / AI Examples {.crunch-title .smaller .title-11 .crunch-ul .crunch-p}\n\n**Netflix**\n\n* **Data Scale**: 260+ million subscribers generating 100+ billion events/day\n* **AI Use**: Personalization, content recommendations, thumbnail generation\n* **Stack**: S3 â†’ Spark â†’ Iceberg â†’ ML models â†’ Real-time serving\n\n**Uber**\n\n* **Data Scale**: 35+ million trips per day, petabytes of location data\n* **AI Use**: ETA prediction, surge pricing, driver-rider matching\n* **Stack**: Kafka â†’ Spark Streaming â†’ Feature Store â†’ ML Platform\n\n**OpenAI**\n\n* **Data Scale**: Trillions of tokens for training, millions of queries/day\n* **AI Use**: GPT models, DALL-E, embeddings\n* **Stack**: Distributed training &rarr; Vector DBs &rarr; Inference clusters\n\n\n## Emerging Trends (2025-2027) {.smaller .crunch-ul .crunch-p}\n\n**Unified Platforms:**\n\n* Data lakes becoming \"AI lakes\"\n* Integrated vector + relational databases\n* One-stop shops for data + AI (Databricks, Snowflake Cortex)\n\n**Edge Computing + AI:**\n\n* Processing at the data source\n* Federated learning across devices\n* 5G enabling real-time edge AI\n\n**Synthetic Data:**\n\n* AI generating training data for AI\n* Privacy-preserving synthetic datasets\n\n## Relative Data Sizes {.text-90 .crunch-title}\n\n&nbsp;<br>\n\n```{=html}\n<style>\n.honk-honk {\n  font-size: 200% !important;\n  /* font-family: \"Bungee Spice\", sans-serif; */\n  font-family: \"Honk\", sans-serif;\n  /* font-optical-sizing: auto; */\n  font-weight: 400;\n  font-style: normal;\n}\n</style>\n```\n\n```{=html}\n<table>\n<thead>\n</thead>\n<tbody>\n<tr>\n  <td align=\"center\" rowspan=\"2\" width=\"15%\" style=\"vertical-align: middle; border-bottom: 0px;\">Can be <b>processed</b> on single machine?</td>\n  <td align=\"center\" width=\"5%\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-bottom: 0px solid #909090;\"><i>No</i></td>\n  <td align=\"center\" width=\"40%\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-top: 2px solid #909090; background-color: #FF991C90;\"><span data-qmd=\"**Medium**<br>(*Parallel Processing*)\"></span></td>\n  <td align=\"center\" width=\"40%\" style=\"background-color: #FF991C90; vertical-align: middle; border-top: 2px solid #909090; border-right: 2px solid #909090;\"><span data-qmd=\"[Big!]{.honk-honk}<br>Parallel + Distributed Processing\"></span></td>\n</tr>\n<tr>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090; border-bottom: 0px solid #909090;\"><i>Yes</i></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090;\"><span data-qmd=\"Small<br>(*Your Laptop*)\"></span></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-right: 2px solid #909090; background-color: #FF991C90;\"><span data-qmd=\"**Medium**<br>(*Data Streaming*)\"></span></td>\n</tr>\n<tr>\n  <td style=\"border-bottom: 0px;\"></td>\n  <td style=\"border-bottom: 0px solid #909090;\"></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-bottom: 0px solid #909090;\"><i>Yes</i></td>\n  <td align=\"center\" style=\"vertical-align: middle; border-bottom: 0px solid #909090;\"><i>No</i></td>\n</tr>\n<tr>\n  <td></td>\n  <td></td>\n  <td align=\"center\" colspan=\"2\">Can be <b>stored</b> on single machine?</td>\n</tr>\n</tbody>\n</table>\n```\n\n\n## What You'll Learn in This Course {.crunch-title .smaller}\n\n*Modern Big Data Stack (2025)*\n\n:::: {layout=\"[1,1]\"}\n::: {#bd-stack-left}\n\n**Query Engines:**\n\n* DuckDB - In-process analytical database\n* Polars - Lightning-fast DataFrame library  \n* Spark - Distributed processing at scale\n\n**Data Warehouses & Lakes:**\n\n* Snowflake - Cloud-native data warehouse\n* Athena - Serverless SQL on S3\n* Iceberg - Open table format\n\n:::\n::: {#bd-stack-right}\n\n**AI/ML Integration:**\n\n* Vector databases for embeddings\n* RAG implementation patterns\n* Streaming with Spark Structured Streaming\n\n**Orchestration:**\n\n* Airflow for pipeline management\n* Serverless with AWS Lambda\n\n:::\n::::\n\n## Data Types\n\n* Structured\n* Unstructured\n* Natural language\n* Machine-generated\n* Graph-based\n* Audio, video, and images\n* Streaming\n\n\n## Big Data vs. Small Data I {.smaller .crunch-title .text-60}\n\n|  | Small Data is usually... | On the other hand, Big Data... |\n|---|---|---|\n| **Goals** | gathered for a specific goal | may have a goal in mind when it's first started, but things can evolve or take unexpected directions |\n| **Location** | in one place, and often in a single computer file | can be in multiple files in multiple servers on computers in different geographic locations |\n| **Structure/Contents** | highly structured like an Excel spreadsheet, and it's got rows and columns of data | can be unstructured, it can have many formats in files involved across disciplines, and may link to other resources |\n| **Preparation** | prepared by the end user for their own purposes | is often prepared by one group of people, analyzed by a second group of people, and then used by a third group of people, and they may have different purposes, and they may have different disciplines |\n\n: {tbl-colwidths=\"[20, 40, 40]\"}\n\n## Big Data vs. Small Data II {.smaller .crunch-title .text-60}\n\n|  | Small Data is usually... | On the other hand, Big Data... |\n|---|---|---|\n| **Longevity** | kept for a specific amount of time after the project is over because there's a clear ending point. In the academic world it's maybe five or seven years and then you can throw it away | contains data that must be stored in perpetuity. Many big data projects extend into the past and future |\n| **Measurements** | measured with a single protocol using set units and it's usually done at the same time | is collected and measured using many sources, protocols, units, etc |\n| **Reproducibility** | be reproduced in their entirety if something goes wrong in the process | replication is seldom feasible |\n| **Stakes** | if things go wrong the costs are limited, it's not an enormous problem | can have high costs of failure in terms of money, time and labor |\n| **Access** | identified by a location specified in a row/column | unless it is exceptionally well designed, the organization can be inscrutable |\n| **Analysis** | analyzed together, all at once | is ordinarily analyzed in incremental steps |\n\n: {tbl-colwidths=\"[20, 40, 40]\"}\n\n## Challenges of Working with Large Datasets {.text-85 .title-09}\n\n| The V | The Challenge |\n|---|---|\n| **Volume** | data scale |\n| **Value** | data usefulness in decision making |\n| **Velocity** | data processing: batch or stream |\n| **Viscosity** | data complexity |\n| **Variability** | data flow inconsistency |\n| **Volatility** | data durability |\n| **Viability** | data activeness |\n| **Validity** | data properly understandable |\n| **Variety** | data heterogeneity |\n\n\n## Thinking About Big Data Workflows {.smaller .crunch-title .title-12}\n\n[William Cohen](http://www.cs.cmu.edu/~wcohen/) (Director, Research Engineering, Google):\n\n* Working with big data is _not_ about...\n  * Code optimization\n  * Learning the details of today's hardware/software (they are evolving...)\n* Working with big data _is_ about **understanding**:\n  * The cost of what you want to do\n  * What the tools that are available offer\n  * How much can be accomplished with linear or nearly-linear operations \n  * How to organize your computations so that they effectively use whateverâ€™s fast\n  * How to test/debug/verify with large data\n* Recall that traditional tools like `R` and `Python` are **single threaded** (by default)\n\n## Tools at-a-glance\n\n:::: {.columns}\n::: {.column width=\"50%\" .r-fit-text}\n### Languages, libraries, and projects\n- [Python](https://www.python.org/)\n    - [`pandas`](https://pandas.pydata.org/)\n    - [`polars`](https://www.pola.rs/)\n    - [`PySpark`](https://spark.apache.org/docs/latest/api/python/index.html)\n    - [`duckdb`](https://duckdb.org/docs/api/python/overview.html)\n    - [`dask`](https://www.dask.org/)\n    - [`ray`](https://www.ray.io/)\n- [Apache Arrow](https://arrow.apache.org/)\n- [Apache Spark](https://spark.apache.org/)\n- [SQL](https://en.wikipedia.org/wiki/SQL) \n- [Apache Hadoop](https://hadoop.apache.org/) (briefly)\n\n:::\n\n::: {.column width=\"50%\" .r-fit-text}\n\n### Cloud Services \n\n- Amazon Web Services (AWS)\n  - [AWS Sagemaker](https://aws.amazon.com/pm/sagemaker/)\n  - [Amazon S3](https://aws.amazon.com/s3/)\n- Azure\n  - [Azure Blob](https://azure.microsoft.com/en-us/products/storage/blobs/)\n  - [Azure Machine Learning](https://azure.microsoft.com/en-us/products/machine-learning/)\n\nOther:\n\n- [AWS Elastic MapReduce (EMR)](https://aws.amazon.com/emr/)\n  \n:::\n:::: \n\n## Additional links of interest\n\n- Matt Turck's Machine Learning, Artificial Intelligence & Data Landscape (MAD)\n    - [Article](https://mattturck.com/mad2023/)\n    - [Interactive Landscape](https://mad.firstmarkcap.com/)\n\n- [Is there life after Hadoop?](https://www.cio.com/article/188940/is-there-life-after-hadoop-the-answer-is-a-resounding-yes.html)\n\n- [10 Best Big Data Tools for 2023](https://jelvix.com/blog/top-5-big-data-frameworks) \n\n\n# Data Engineering {data-stack-name=\"Data Engineering\"}\n\n## Data Scientist vs. Data Engineer {.smaller}\n\nIn this course, you'll **augment** your data scientist skills with data engineering skills!\n\n<center>\n\n<img src=\"img/bdi-core-competencies-deng-and-dsci.png\" width=\"60%\">\n\n</center>\n\n## Data Engineer Responsibilities\n\n<center>\n\n<img src=\"img/datacamp-3.png\" width=600>\n\n</center>\n\n\n## Data Engineering: Levels 2 and 3\n\n<center>\n\n<img src=\"img/rogati.png\" width=600>\n\n</center>\n\n# Modern Data Architecture\n\n## Architecture\n\n![](img/01-data-platform-anatomy.png){fig-align=\"center\"}\n\n## Storage\n\n![](img/02-data-platform-storage.png){fig-align=\"center\"}\n\n## Source control\n\n![](img/03-data-platform-source-control.png){fig-align=\"center\"}\n\n## Orchestration\n\n![](img/04-data-platform-orchestration.png){fig-align=\"center\"}\n\n## Processing\n\n![](img/05-data-platform-processing.png){fig-align=\"center\"}\n\n## Analytics\n\n![](img/06-data-platform-analytics.png){fig-align=\"center\"}\n\n## Machine Learning\n\n![](img/07-data-platform-ml.png){fig-align=\"center\"}\n\n## Governance\n\n![](img/08-data-platform-governance.png){fig-align=\"center\"}\n\n# Time for Lab! Linux Command Line {data-stack-name=\"Linux Lab\"}\n\n## The Terminal {.crunch-title .text-90}\n\n:::: {layout=\"[1,1]\" layout-valign=\"center\"}\n::: {#terminal-text}\n\n- Terminal access was **THE ONLY** way to do programming\n- No GUIs! No Spyder, Jupyter, RStudio, etc.\n- Coding is still more powerful than graphical interfaces for complex jobs\n- Coding makes work repeatable\n\n:::\n::: {#terminal-img}\n\n![](img/terminal_old_computer.jpg)\n\n:::\n::::\n\n## BASH {.crunch-title}\n\n:::: {layout=\"[60,40]\" layout-valign=\"center\"}\n::: {#bash-text}\n\n* Created in 1989 by Brian Fox: \"**B**ourne-**A**gain **Sh**ell\"\n* Brian Fox also built the first online interactive banking software\n* BASH is a command processor\n* Connection between you and the machine language and hardware\n\n:::\n::: {#bash-img}\n\n![](img/bash.png)\n\n:::\n::::\n\n## The Prompt\n\n``` {.bash code-line-numbers=\"false\"}\nusername@hostname:current_directory $\n```\n\nWhat do we learn from the prompt?\n\n- Who you are - **`username`**\n- The machine where your code is running - **`hostname`**\n- The directory where your code is running - **`current_directory`**\n- The shell type - **`$`** - this symbol means BA$H\n\n## Syntax {.smaller .crunch-title .crunch-p .crunch-li-7}\n\n``` {.bash code-line-numbers=\"false\"}\nCOMMAND -F --FLAG\n```\n\n* `COMMAND` is the program, everything after that = arguments\n* `F` is a single letter flag, `FLAG` is a single word or words connected by dashes. A space breaks things into a new argument.\n* Sometimes argument has single letter and long form versions (e.g. `F` and `FLAG`)\n\n```{.bash code-line-numbers=\"false\"}\nCOMMAND -F --FILE file1\n```\n\n* Here we pass a text argument `\"file1\"` as the **value** for the `FILE` flag\n* **`-h`** flag is usually to get help. You can also run the **`man`** command and pass the name of the program as the argument to get the help page.\n\nLet's try basic commands:\n\n- **`date`** to get the current date\n- **`whoami`** to get your user name\n- **`echo \"Hello World\"`** to print to the console\n\n## Examining Files {.crunch-title .text-85 .crunch-ul .crunch-li-8}\n\n* Find out your **P**resent **W**orking **D**irectory **`pwd`**\n* Examine the contents of files and folders using **`ls`**\n* Make new files from scratch using **`touch`**\n* **Glob**: \"Mini-language\" for selecting files with wildcards\n  - **`\\*`** for wild card any number of characters\n  - **`\\?`** for wild card for a single character\n  - **`[]`** for one of many character options\n  - **`!`** for exclusion\n  - **`[:alpha:]`**, **`[:alnum:]`**, **`[:digit:]`**, **`[:lower:]`**, **`[:upper:]`**\n\n[Reference material: Shell Lesson 1,2,4,5](https://linuxjourney.com/lesson/the-shell)\n\n## Navigating Directories {.crunch-title .text-80 .crunch-ul .crunch-p .crunch-li-8}\n\n* Knowing **where your terminal is executing code** ensures you are working with the right inputs/outputs.\n* Use `pwd` to determine the Present Working Directory.\n* Change to a folder called \"git-repo\" with `cd git-repo`.\n- **`.`** refers to the current directory, such as **`./git-repo`**\n- **`..`** can be used to move up one level (**`cd ..`**), and can be combined to move up multiple levels (**`cd ../../my_folder`**)\n- **`/`** is the **root** of the filesystem: contains core folders (system, users)\n- **`~`** is the **home directory**. Move to folders referenced relative to this path by including it at the start of your path, for example **`~/projects`**.\n* To **visualize the structure** of your working directory, use **`tree`**\n\n[Reference link](https://www.freecodecamp.org/news/linux-command-line-bash-tutorial/)\n\n## Interacting with Files {.crunch-title .crunch-ul .text-85 .crunch-p .crunch-li-8}\n\nNow that we know how to navigate through **directories**, we need commands for interacting with **files**...\n\n- **`mv`** to move files from one location to another\n  * Can use glob here - `?`, `*`, `[]`, ...\n- **`cp`** to copy files instead of moving\n  + Can use glob here - `?`, `*`, `[]`, ...\n- **`mkdir`** to make a directory\n- **`rm`** to remove files\n- **`rmdir`** to remove directories\n- **`rm -rf`** to blast everything! WARNING!!! DO NOT USE UNLESS YOU KNOW WHAT YOU ARE DOING\n\n## Using BASH for Data Exploration {.crunch-title .crunch-ul .text-90 .crunch-li-8}\n\n- **`head FILENAME`** / **`tail FILENAME`** - glimpsing the first / last few rows of data\n- **`more FILENAME`** / **`less FILENAME`** - viewing the data with basic up / (up & down) controls\n- **`cat FILENAME`** - print entire file contents into terminal\n- **`vim FILENAME`** - open (or edit!) the file in vim editor\n- **`grep FILENAME`** - search for lines within a file that match a regex expression\n- **`wc FILENAME`** - count the number of lines (**`-l`** flag) or number of words (**`-w`** flag)\n\n[Reference material: Text Lesson 8,9,15,16](https://linuxjourney.com/lesson/stdout-standard-out-redirect)\n\n## Pipes and Arrows\n\n* **`|`** sends the stdout to another command (is the most powerful symbol in BASH!)\n* **`>`**  sends stdout to a file and overwrites anything that was there before\n* **`>>`** appends the stdout to the end of a file (or starts a new file from scratch if one does not exist yet)\n* **`<`** sends stdin into the command on the left\n\n[Reference material: Text Lesson 1,2,3,4,5](https://linuxjourney.com/lesson/stdout-standard-out-redirect)\n\n## Alias and User Files {.crunch-title .text-85}\n\n* `/.bashrc` is where your shell settings are located\n* How many processes? **`whoami | xargs ps -u | wc -l`**\n* Hard to remember full command! Let's make an **alias**\n* General syntax:\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias alias_name=\"command_to_run\"\n  ```\n\n* For our case:\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias nproc=\"whoami | xargs ps -u | wc -l\"\n  ```\n\n* Now we need to put this alias into the .bashrc\n\n  ``` {.bash code-line-numbers=\"false\"}\n  alias nproc=\"whoami | xargs ps -u | wc -l\" >> ~/.bashrc\n  ```\n\n* Your commands get saved in **`~/.bash_history`**\n\n## Process Management {.crunch-title .text-90 .crunch-ul .crunch-p .crunch-li-8}\n\n* Use **`ps`** to see your running processes\n* Use **`top`** or even better **`htop`** to see all running processes\n* Install **htop** via **`sudo yum install htop -y`**\n* To kill a broken process: first find the **process ID (PID)**\n* Then use **`kill [PID NUM]`** to \"ask\" the process to terminate. If things get really bad: **`kill -9 [PID NUM]`**\n* To kill a command in the terminal window it is running in, try using **Ctrl + C** or **Ctrl + /**\n* Run **`cat`** on its own to let it stay open. Now open a new terminal to examine the processes and find the cat process.\n\n[Reference material: Text Lesson 1,2,3,7,9,10](https://linuxjourney.com/lesson/monitor-processes-ps-command)\n\n## Try playing a Linux game!\n\n[Bash crawl](https://gitlab.com/slackermedia/bashcrawl) is a game to help you practice your navigation and file access skills. Click on the **binder** link in this repo to launch a jupyter lab session and explore!\n"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":true,"freeze":false,"echo":false,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":"mathjax","slide-level":2,"to":"revealjs","output-file":"slides.html","include-in-header":{"text":"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css'><link rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css'><link rel='preconnect' href='https://fonts.gstatic.com' crossorigin><link href='https://fonts.googleapis.com/css2?family=Honk&display=swap' rel='stylesheet'>"}},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":false,"quarto-version":"1.7.33","auto-stretch":true,"_quarto-vars":{"course":{"author":"Jeff Jacobs","institute":"<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>","slides-subtitle":"*DSAN 6000: Big Data and Cloud Computing*<br>Fall 2025","name":"Big Data and Cloud Computing","code":"DSAN 6000","number":"DSAN 6000","semester":"Fall 2025","days":"Mondays & Thursdays (Prof Jeff)","time":"3:30-6:00 PM (Jeff Mon), 6:30-9:00 PM (Jeff Thu)","location":"Reiss 262 (W, Amit), Walsh 394 (Mon & Thu, Jeff)","dates":"August 27 â€“ December 20, 2025","github":"https://github.com/gu-dsan/6000-fall-2025.git","github_org":"https://github.com/gu-dsan/","github_classroom":"https://classroom.github.com/classrooms/34950344-georgetown-university-dsan6000-big-data-and-cloud-computing","url":"https://gu-dsan.github.io/6000-fall-2025/","copyright_year":"2025","slack":"https://dsan6000fall2025.slack.com","slack_join":"https://join.slack.com/t/dsan6000fall2025/shared_invite/zt-3b22qhque-GagQykwYYNiEzli9UXJn4w","email":"dsan-Fall-2025@georgetown.edu","class_start_hhmmss":"093000","class_end_hhmmss":"120000","lab0":"https://georgetown.instructure.com/courses/193302/assignments","lms_course_url":"https://georgetown.instructure.com/courses/TBA-2025","lms_course_url_md":"[`{{< var course.lms_course_url >}}`]({{< var course.lms_course_url >}})","last_day_of_class":"Dec 20th, 2025"},"weeks":[{"weeknum":1,"title":"Course Overview","footer":"DSAN 6000 Week 1: Course Overview","date-md":"Aug 28"},{"weeknum":2,"title":"How Do Maps Work?","footer":"PPOL 6805 Week 2: How Do Maps Work?","date-md":"Sep 4"},{"weeknum":3,"title":"Unary Operations","footer":"PPOL 6805 Week 3: Unary Operations","date-md":"Sep 11"},{"weeknum":4,"title":"Binary Operations","footer":"PPOL 6805 Week 4: Binary Operations","date-md":"Sep 18"},{"weeknum":5,"title":"Spatial Data Science!","footer":"PPOL 6805 Week 5: Spatial Data Science","date-md":"Sep 25"},{"weeknum":6,"title":"Random Fields and Spatial Autocorrelation","footer":"PPOL 6805 Week 6: Random Fields","date-md":"Oct 2"},{"weeknum":7,"title":"Point Processes, Clustering, and Regularity","footer":"PPOL 6805 Week 7: Point Processes, Clustering, Regularity","date-md":"Oct 9"},{"weeknum":8,"title":"Null Models and Marked Point Processes","footer":"PPOL 6805 Week 8: Spatial Prediction","date-md":"Oct 16"},{"weeknum":9,"title":"Evaluating Spatial Hypotheses I: Point Data","footer":"PPOL 6805 Week 9: Evaluating Point Data Hypotheses","date-md":"Oct 23"},{"weeknum":10,"title":"Evaluating Spatial Hypotheses II: Areal Data","footer":"PPOL 6805 Week 10: Areal Data Hypotheses","date-md":"Oct 30"},{"weeknum":11,"title":"In-Class Midterm","footer":"PPOL 6805 Week 11","date-md":"Nov 6"},{"weeknum":12,"title":"Tools for Final Projects","footer":"PPOL 6805 Week 12: Tools for Final Projects","date-md":"Nov 13"},{"weeknum":13,"title":"In-Class Office Hours","footer":"PPOL 6805 Week 13","date-md":"Nov 20"},{"weeknum":14,"title":"Final Presentations I","footer":"PPOL 6805 Week 14","date-md":"Dec 4"},{"weeknum":15,"title":"Final Presentations II","footer":"PPOL 6805 Week 15","date-md":"Dec 11"}],"university":{"name":"Georgetown University","url":"https://www.georgetown.edu/","lms":"Canvas","lms_url":"https://canvas.georgetown.edu"}},"title":"Week 1: Course Overview","subtitle":"{{< var course.slides-subtitle >}}","author":"{{< var course.author >}}","institute":"{{< var course.institute >}}","date":"2025-08-28","date-format":"full","lecnum":1,"categories":["Class Sessions"],"crossref":{"fig-title":"Fig"},"slideNumber":true,"scrollable":true,"footer":"{{< var weeks.1.footer >}}","theme":["default","../dsan-globals/jjquarto.scss"],"revealjs-plugins":["simplemenu"],"simplemenu":{"flat":true,"barhtml":{"header":"<div class='menubar'><span style='position: absolute; left: 8; padding-left: 8px;'><a href='./index.html'>&larr; Return to Notes</a></span><ul class='menu'></ul></div>"},"scale":0.5}}},"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":true,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["/dsan-globals/jjstyles.css"],"toc":true,"include-in-header":{"text":"<script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js' integrity='sha512-v2CJ7UaYy4JwqLDIrZUI/4hqeoQieOmAZNXBeQyjo21dadnwR+8ZaIJVT8EE2iyI61OV8e6M8PP2/4hpQINQ/g=='' crossorigin='anonymous' referrerpolicy='no-referrer'></script><link rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/gh/dreampulse/computer-modern-web-font@master/fonts.css'><script src='/sidebar.js'></script>"},"output-file":"index.html","html-math-method":"mathjax"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.33","_quarto-vars":{"course":{"author":"Jeff Jacobs","institute":"<a href='mailto:jj1088@georgetown.edu' target='_blank'>`jj1088@georgetown.edu`</a>","slides-subtitle":"*DSAN 6000: Big Data and Cloud Computing*<br>Fall 2025","name":"Big Data and Cloud Computing","code":"DSAN 6000","number":"DSAN 6000","semester":"Fall 2025","days":"Mondays & Thursdays (Prof Jeff)","time":"3:30-6:00 PM (Jeff Mon), 6:30-9:00 PM (Jeff Thu)","location":"Reiss 262 (W, Amit), Walsh 394 (Mon & Thu, Jeff)","dates":"August 27 â€“ December 20, 2025","github":"https://github.com/gu-dsan/6000-fall-2025.git","github_org":"https://github.com/gu-dsan/","github_classroom":"https://classroom.github.com/classrooms/34950344-georgetown-university-dsan6000-big-data-and-cloud-computing","url":"https://gu-dsan.github.io/6000-fall-2025/","copyright_year":"2025","slack":"https://dsan6000fall2025.slack.com","slack_join":"https://join.slack.com/t/dsan6000fall2025/shared_invite/zt-3b22qhque-GagQykwYYNiEzli9UXJn4w","email":"dsan-Fall-2025@georgetown.edu","class_start_hhmmss":"093000","class_end_hhmmss":"120000","lab0":"https://georgetown.instructure.com/courses/193302/assignments","lms_course_url":"https://georgetown.instructure.com/courses/TBA-2025","lms_course_url_md":"[`{{< var course.lms_course_url >}}`]({{< var course.lms_course_url >}})","last_day_of_class":"Dec 20th, 2025"},"weeks":[{"weeknum":1,"title":"Course Overview","footer":"DSAN 6000 Week 1: Course Overview","date-md":"Aug 28"},{"weeknum":2,"title":"How Do Maps Work?","footer":"PPOL 6805 Week 2: How Do Maps Work?","date-md":"Sep 4"},{"weeknum":3,"title":"Unary Operations","footer":"PPOL 6805 Week 3: Unary Operations","date-md":"Sep 11"},{"weeknum":4,"title":"Binary Operations","footer":"PPOL 6805 Week 4: Binary Operations","date-md":"Sep 18"},{"weeknum":5,"title":"Spatial Data Science!","footer":"PPOL 6805 Week 5: Spatial Data Science","date-md":"Sep 25"},{"weeknum":6,"title":"Random Fields and Spatial Autocorrelation","footer":"PPOL 6805 Week 6: Random Fields","date-md":"Oct 2"},{"weeknum":7,"title":"Point Processes, Clustering, and Regularity","footer":"PPOL 6805 Week 7: Point Processes, Clustering, Regularity","date-md":"Oct 9"},{"weeknum":8,"title":"Null Models and Marked Point Processes","footer":"PPOL 6805 Week 8: Spatial Prediction","date-md":"Oct 16"},{"weeknum":9,"title":"Evaluating Spatial Hypotheses I: Point Data","footer":"PPOL 6805 Week 9: Evaluating Point Data Hypotheses","date-md":"Oct 23"},{"weeknum":10,"title":"Evaluating Spatial Hypotheses II: Areal Data","footer":"PPOL 6805 Week 10: Areal Data Hypotheses","date-md":"Oct 30"},{"weeknum":11,"title":"In-Class Midterm","footer":"PPOL 6805 Week 11","date-md":"Nov 6"},{"weeknum":12,"title":"Tools for Final Projects","footer":"PPOL 6805 Week 12: Tools for Final Projects","date-md":"Nov 13"},{"weeknum":13,"title":"In-Class Office Hours","footer":"PPOL 6805 Week 13","date-md":"Nov 20"},{"weeknum":14,"title":"Final Presentations I","footer":"PPOL 6805 Week 14","date-md":"Dec 4"},{"weeknum":15,"title":"Final Presentations II","footer":"PPOL 6805 Week 15","date-md":"Dec 11"}],"university":{"name":"Georgetown University","url":"https://www.georgetown.edu/","lms":"Canvas","lms_url":"https://canvas.georgetown.edu"}},"theme":{"light":"default","dark":"darkly"},"title":"Week 1: Course Overview","subtitle":"{{< var course.slides-subtitle >}}","author":"{{< var course.author >}}","institute":"{{< var course.institute >}}","date":"2025-08-28","date-format":"full","lecnum":1,"categories":["Class Sessions"],"crossref":{"fig-title":"Fig"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}